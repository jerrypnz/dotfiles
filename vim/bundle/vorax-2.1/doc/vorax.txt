*vorax.txt*   Plugin for working with Oracle databases.
              For vim version 7.x

			      By Alexandru TicÄƒ
		    alexandru.tica email-at-sign gmail.com

							*vorax* *vorax-plugin*

	Contents:
	   How to Install ......................... |vorax-install|
	   Commands .............................. |vorax-commands|
	   Mappings .............................. |vorax-mappings|
	   Configuration .................... |vorax-configuration|
	   Using DbExplorer .................... |vorax-dbexplorer|
	   Using the Connection Window ........ |vorax-conn-window|
	   Using the the Fuzzy Search  ....... |vorax-fuzzy-search|
	   Integration ........................ |vorax-integration|

VoraX aims to be a simple, yet a powerful IDE for Oracle databases. Instead of
reinventing the wheel, VoraX relies on the well-known SqlPLUS which is
actually used to connect to the database, to execute and to get the results
from the target Oracle server. However, this interaction is hidden from the user 
who just uses his/her Vim environment without knowing that, behind, an SqlPLUS
process does all the work.

The big advantage of this approach is that, in VoraX, almost all SqlPLUS commands 
may be used without any problems. You can format columns, set pagination,
autotrace queries etc. Basically, everything you used to type on your SqlPLUS
prompt is guaranteed to work in VoraX, except maybe for some exotic cases
(e.g. using vim in console mode, having the EDITOR set to a terminal editor
and executing the "ed" sqlplus command).

Another advantage is that you'll get an efficient Oracle IDE with a very small
footprint. For Oracle DBAs this is huge because they don't need heavy tools
with a lot of features they never use. Likewise, the fact that VoraX may be used 
within a regular console makes it suitable for server environments.

==============================================================================
HOW TO INSTALL 						       *vorax-install*

VoraX follows the standard procedure of installing a Vim plugin. However, you 
need to take care of some dependencies VoraX relies on:

1. your vim must have ruby support enabled. In order to check this you may
execute :version and look for +ruby.
2. the anlr3 gem. You may install it using:
	gem install antlr3 -r
2. for Windows OS, besides ruby, you'll also need the win32-api gem. You may
install it using: 
	gem install win32-api -r
3. a working Oracle client with sqlplus, which has to be available in the
environment $PATH variable. The instant client with sqlplus should be just
fine.
4. optionaly, if you want to securely store passwords for your Oracle
connections then the openssl ruby extension must be available. On Ubuntu systems
you may use the following command:
	sudo apt-get install libopenssl-ruby1.8

Please notice that just ruby 1.8 is supported for the moment therefore be
careful not to install ruby 1.9 instead.

After the installation is done it is advisable to index the documentation
using the following commands:
	:helptags $VIM/.vim/doc 		(Unix)
	:helptags $VIM/vimfiles/doc 		(Windows)

==============================================================================
COMMANDS 						      *vorax-commands*

VoraX defines the following commands:

:VoraxConnect {connection_string}
	-> it is used to connect to an Oracle database. The
	{connection_string} has the same format as the one expected by a
	regular SqlPlus tool: user/password@db. If the connection_string is
	not provided, or an incomplete one is given (e.g. user@db) then VoraX
	will prompt the user for all mising parts needed for connecting.

:VoraxExecUnderCursor
	-> executes the current statement where the cursor is. In order this
	command to correctly detect this statement it is advisable to be used
	in a sql buffer only.

:VoraxExecBuffer
	-> executes all statements from the current buffer.

:VoraxExecVisualSQL
	-> executes the current selection.

:VoraxDbExplorer
	-> opens the database explorer tree.

:VoraxDescribe [object]
	-> describes the provided database object. If no object is provided
	the one under cursor is described.

:VoraxDescribeVisual
	-> describes the visual selected database object.

:VoraxDescribeVerbose [object]
	-> describes the provided database object in a detailed mode. For the
	moment just tables and views are supported. Unlike the regular
	describe, the detailed one also displays: comments, foreign keys,
	indexes etc.

:VoraxDescribeVerboseVisual
	-> describes the visual selected database object in a detailed mode.

:VoraxGotoDefinition [object]
	-> Opens the definition of the provided object. If no object is
	provided the one under cursor is assumed. The object will be opened
	into a readonly buffer.

:VoraxToggleConnWindow
	-> Toggles the connection profiles window.

:VoraxSearch
	-> Fuzzy search for a database object name.
==============================================================================
MAPPINGS 						      *vorax-mappings*

The default mappings for VoraX are:

<Leader>vc 	: Request a connection to the database.
<Leader>ve 	: Executes statements (the current one or the selected ones).
<Leader>vb 	: Executes all statements from the current buffer.
<Leader>vv 	: Opens the database explorer tree.
<Leader>vd 	: Describe the database object under cursor.
<Leader>vdd 	: Describe the database object under cursor using the detailed
		  mode.
<Leader>vg 	: Go to definition of the database object under cursor.
<Leader>vo 	: Toggles the connection profiles window.
<Leader>vl 	: While in insert mode start a vorax fuzzy search.

==============================================================================
CONFIGURATION 						 *vorax-configuration*

You may customize VoraX using the following global variables:

g:vorax_sqlplus_header
	-> it is a "\n" delimited list of commands to be executed into the
	sqlplus environment before creating a new oracle session. These
	commands overides the settings from your [g]login.sql file.

g:vorax_resultwin_geometry
	-> the position and the size of the results window. The syntax is the
	same as for split. 

g:vorax_resultwin_clear
	-> defines whenever or not the result window to be cleared between
	subsequent SQL executions. If 1, the result window is cleared before
	executing another statements. Otherwise, the results from the new
	executed statement are simply appended to the end of the already
	existing content.

g:vorax_inline_prompt
	-> this variable defines how VoraX should ask the user for input when
	SqlPlus requires this. For example, an sqlplus script may have ACCEPT
	statements used to get input from the user. Because you don't interact
	directly with SqlPlus is up to VoraX do define how to prompt for these
	values. If g:vorax_inline_prompt is 1 then VoraX expect to receive the
	user input directly in the result window. For this, you have to go to
	the last line (G) and to add at the very end of it (A) your value.
	It's the same like in SqlPlus but more picky because VoraX will
	consider as your input just the text you enter after the very end
	column of the prompt label. So, be careful, not to edit this last line
	before this position. If you want a safer way of providing input you
	can set this variable on 0. In this case when VoraX waits for input
	you may press ENTER and you'll be requested to enter your value in the
	vim command line area.

g:vorax_dbexplorer_side
	-> configures the placement of the database explorer tree. If 0 it
	will be layed out on the left, if 1 on the right.

g:vorax_dbexplorer_width
	-> configures how large the width of the database explorer window
	should be.

g:vorax_dbexplorer_object_over_file
	-> configures how DbExplorer should open a database object when a
	file with the same name already exists within the current directory.
	The possible values are:
		0 = always load the source from the database
		1 = always load the file if there is one
		2 = ask the user
	Setting this variable on 1 may be convinient for those who's working
	with a source control system and, even they open the database object
	from DbExplorer they still want to rely on the file version of that
	source.

g:vorax_dbexplorer_file_extensions
	-> setup file extensions for every relevant object type which is
	opened from DbExplorer. If a type is not found within this array the
	default .sql extension will be used. This variable is a list of
	dictionaries having the following keys:
		"type" = the type of the database object
		"ext"  = the corresponding file extension (without the leading
			 dot)

g:vorax_messages
	-> this is a way of having all string messages in a central place. It
	acts like a rude string resource. However, you may change it if you
	don't like the already defined messages or you don't like English.

g:vorax_logging
	-> if 1 then the logging feature of the result window will be
	activated at startup, otherwise, by default, the logging feature will
	be disabled. However, it can be enabled by using the "L" key within
	the result window. If logging is enabled everyting is written into the
	result window will also be written into the log file. The log file has
	the following format: vorax_[current_time_in_sec]_[pid_of_vim].log.

g:vorax_logging_dir
	-> where to create the logfile if result window logging is requested. 
	By default the user's home directory is assumed.
	
g:vorax_connwin_geometry
	-> the position and the size of the connection profiles window. The 
	syntax is the same as for split. 

g:vorax_open_scratch_at_connect
	-> if 1 then a scratch sql buffer will be opened after a successful
	connection. This means you may start executing SQL statements right
	away.

g:vorax_store_passwords
	-> if this option is set then you may store passwords for your
	database connections in a secure repository. First time you choose to
	store a password, VoraX will create a secured repository for you and it'll
	ask for a master password. After that, it's enough to provide this
	master password and all the other passwords for your oracle
	connections will be fetched from this repository. The
	encoding/decoding mechanism is based on RSA keys which are
	automatically generated into the user's home directory. This feature
	needs the openssl extension for ruby. In Ubuntu for example you may
	install it using: sudo apt-get install libopenssl-ruby1.8

g:vorax_debug
	->  this variable controlls whenever or not to write into a log file.
	This feature depends on the log.vim plugin which is available on 
	http://www.vim.org/scripts/script.php?script_id=2330 address. Pay
	attention that this script should resie in the autoload directory.

==============================================================================
USING DBEXPLORER 					     *vorax-dbexplorer*

The DbExplorer may be used to browse database objects and to view/edit their
definitions. To move through nodes use the standard vim navigation keys. To
open a node you may press ENTER or the "o" key. To refresh a node you may
use the "R" key. Likewise, the describe mappings are also available within the
tree. You can select the object you want and invoke describe directly from
here.

==============================================================================
USING THE CONNECTION WINDOW 			 	    *vorax-conn-window*

The connection profiles window is a special buffer where you may store all
your frequently used connection strings. A connection profile can be something
like user@database or an EZCONNECT string. Even it's not advisable you may
also include the password if you want, but take care that it will be shown and
stored in clear. The connection profiles window assumes that one profile per
line is provided. For all important connection profiles (e.g. connections with
a DBA user on a productive database) you may put a "!" before in order to
highlight them. This should act like an warning that you are about to connect
to a powerful user. If a line starts with a "--" (the sql comment style) that
line is ignored. You may use this to separate various profiles according to
your criteria. In order to connect using a profile just go on that line and
press ENTER. As an additional mapping you may close the profiles window by
pressing the "q" key.

The connection profiles file is always stored into:
&rtp/vorax/config/_vorax_connections file.

==============================================================================
USING THE FUZZY SEARCH 			 	           *vorax-fuzzy-search*

VoraX allows to fuzzy search for a database item. This may be quite handy when
you don't know the complete name of the item but just a part of it. For
example, suppose you want to increase the size of your flash recovery area and
you don't know the exact name of the parameter. However, you know that there's
a "recovery" word somewhere in between. So, your sql buffer may look like
this:

ALTER SYSTEM SET |<-- invoke fuzzy search here

While still in insert mode invoke the fuzzy search using <Leader> vl and type
there the word "recovery". You should recognize now the name of the search
parameter: db_recovery_file_dest_size. Just select it, press ENTER and the
parameter name will be inserted at the cursor position.

The fuzzy list contains also the item type in order to be able to further
select just the items type you want. For example, you may input:

recovery;:param

and just the parameters which contains the pattern "recovery" will be shown.
You may customize the searchable database items by modifying the following sql
script:

&rt/vorax/sql/search.sql

The VoraX fuzzy search feature depends on the FuzzyFinder plugin. Please see
the next section about VoraX integration.
==============================================================================
INTEGRATION 						    *vorax-integration*

VoraX integrates with NERDTree plugin. It creates a key map in order to
execute an sql file directly from the NERDTree explorer. Select the file you
want to execute and press '@' key. This key works only for those files which
have the '.sql' extension or an extension specified in
g:vorax_db_explorer_file_extenstions.

NERDTree plugin is available at: 
http://www.vim.org/scripts/script.php?script_id=1658

The second plugin which may be used nicely together with VoraX is XpTemplates.
VoraX defines some useful snippets for faster sql/plsql editing. I chosen
XpTemplates over snipMate because it integrates better with SuperTab plugin.
However, pay attention that using both, XpTemplates and SnipMate, may cause
problems.

XpTemplates plugin is available at:
http://www.vim.org/scripts/script.php?script_id=2611

TagList is another nice plugin which may be used with VoraX. It provides a
code navigation browser for the Oracle packages and some sql files (e.g.
tables).

TagList plugin is available at:
http://www.vim.org/scripts/script.php?script_id=273

FuzzyFinder is a must plugin if you want to fuzzy search for various database
items.

FuzzyFinder is available at:
http://www.vim.org/scripts/script.php?script_id=1984

vim:ts=8 sw=8 noexpandtab tw=78 ft=help:
